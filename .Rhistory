boxplot(data$Intake--data$Participation)
par(mfrow=c(2,2))
boxplot(data$Intake--data$Participation)
par(mfrow=c(0.5,0.5))
boxplot(data$Intake--data$Participation)
par(mfrow=c(1,1))
boxplot(data$Intake--data$Participation)
boxplot(data$Intake-data$Participation)
boxplot(non_participant)
boxplot(Participant)
boxplot(non_participant)
library(ggplot2)
ggplot(data, aes(x = intake, fill = factor(participation))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 10) +
scale_fill_manual(values = c("#FFC107", "#E91E63"), labels = c("No", "Yes")) +
labs(title = "Calorie Distribution by Participation", x = "Calories",
y = "Count")
ggplot(data, aes(x = Intake, fill = factor(Participation))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 10) +
scale_fill_manual(values = c("#FFC107", "#E91E63"), labels = c("No", "Yes")) +
labs(title = "Calorie Distribution by Participation", x = "Calories",
y = "Count")
# Calculate the test statistic and p-value
t.test(data, mu = 425, alternative = "two.sided")
# Calculate the test statistic and p-value
t.test(Participant, mu = 425, alternative = "two.sided")
# Calculate the test statistic and p-value
participants
t.test(participant, mu = 425, alternative = "two.sided")
t.test(participants, mu = 425, alternative = "two.sided")
# Calculate the confidence interval
n <- length(participants)
alpha <- 0.1 # since it's a 90% confidence interval, alpha = 1 - 0.9 = 0.1
t_score <- qt(alpha / 2, n - 1, lower.tail = FALSE)
x_bar <- mean(participants)
s <- sd(participants)
se <- s / sqrt(n)
lower <- x_bar - t_score * se
upper <- x_bar + t_score * se
# Print the confidence interval
cat("90% Confidence interval for mean calorie intake for participants: [",
round(lower, 2), ", ", round(upper, 2), "]")
# Calculate the test statistic and p-value
t_stat <- t.test(participants, non_participants, var.equal = FALSE,
alternative = "greater")$statistic
p_val <- t.test(participants, non_participants, var.equal = FALSE,
alternative = "greater")$p.value
t_stat
p_val
# Histogram and normal probability plot for participants
par(mfrow=c(2,1))
hist(participants, breaks = 10, main = "Histogram of Calorie Intake for Participants")
# Histogram and normal probability plot for participants
par(mfrow=c(1,1))
hist(participants, breaks = 10, main = "Histogram of Calorie Intake for Participants")
qqnorm(participants, main = "Normal Probability Plot of Calorie Intake for Participants")
qqline(participants)
# Histogram and normal probability plot for non-participants
hist(non_participants, breaks = 10, main = "Histogram of Calorie Intake for Non-Participants")
qqnorm(non_participants, main = "Normal Probability Plot of Calorie Intake for Non-Participants")
qqline(non_participants)
# Histogram and normal probability plot for participants
par(mfrow=c(1,1))
hist(participants, breaks = 10, main = "Histogram of Calorie Intake for Participants")
# Histogram and normal probability plot for non-participants
hist(non_participants, breaks = 10, main = "Histogram of Calorie Intake for Non-Participants")
qqnorm(participants, main = "Normal Probability Plot of Calorie Intake for Participants")
qqline(participants)
qqnorm(non_participants, main = "Normal Probability Plot of Calorie Intake for Non-Participants")
qqline(non_participants)
# F-test for equality of variances
var.test(participants, non_participants)
data<-read.csv(file="/Users/kadam/Desktop/CS555/fish mercury data.csv")
ggplot(data, aes(x = Number_of_meals_with_fish, y = Total_Mercury_in_mg_per_g)) +
geom_point() +
labs(x = "Number of meals with fish", y = "Total mercury (mg/g)", title = "Scatterplot of fish meals and mercury levels")
library(ggplot2)
ggplot(data, aes(x = Number_of_meals_with_fish, y = Total_Mercury_in_mg_per_g)) +
geom_point() +
labs(x = "Number of meals with fish", y = "Total mercury (mg/g)", title = "Scatterplot of fish meals and mercury levels")
library(ggplot2)
ggplot(data, aes(x = Number of meals with fish, y = Total Mercury in mg/g)) +
ggplot(data,  +
labs(x = "Number of meals with fish", y = "Total mercury (mg/g)",
library(ggplot2)
data<-read.csv(file="/Users/kadam/Desktop/CS555/fish mercury data.csv")
library(ggplot2)
ggplot(data,  +geom_point() +
title = "Scatterplot of fish meals and mercury levels")
title = "Scatterplot of fish meals and mercury levels")
data<-read.csv(file="/Users/kadam/Desktop/CS555/fish mercury data.csv")
plot(x = data$Number.of.meals.with.fish,y = data$Total.Mercury.in.mg.g,
xlab = "No. of meals with fish",
ylab = "Total Mercury mg/g",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Scatterplot of fish meals vs mercury levels"
)
plot(x = data$Number.of.meals.with.fish,y = data$Total.Mercury.in.mg.g,
xlab = "No. of meals with fish",
ylab = "Total Mercury mg/g",
xlim = c(0,20),
ylim = c(0,15),
main = "Scatterplot of fish meals vs mercury levels"
)
plot(x = data$Number.of.meals.with.fish,y = data$Total.Mercury.in.mg.g,
xlab = "No. of meals with fish",
ylab = "Total Mercury mg/g",
xlim = c(0,30),
ylim = c(0,20),
main = "Scatterplot of fish meals vs mercury levels"
)
plot(x = data$Number.of.meals.with.fish,y = data$Total.Mercury.in.mg.g,
xlab = "No. of meals with fish",
ylab = "Total Mercury mg/g",
xlim = c(0,25),
ylim = c(0,15),
main = "Scatterplot of fish meals vs mercury levels"
)
data<-read.csv(file="/Users/kadam/Desktop/CS555/fish mercury data.csv")
library(ggplot2)
ggplot(data, aes(x=Number.of.meals.with.fish, y=Total.Mercury.in.mg.g)) +
geom_point()
ggplot(data, aes(x=Number.of.meals.with.fish, y=Total.Mercury.in.mg.g)) +
geom_point() + title = "Scatterplot of fish meals vs mercury levels"
ggplot(data, aes(x=Number.of.meals.with.fish, y=Total.Mercury.in.mg.g)) +
geom_point()
ggplot(data, aes(x=Number.of.meals.with.fish, y=Total.Mercury.in.mg.g)) +
geom_point() + labs(title = "Scatterplot of fish meals and mercury levels")
cor(data$Number.of.meals.with.fish, data$Total.Mercury.in.mg.g)
fit <- lm(Total.Mercury.in.mg.g ~ Number.of.meals.with.fish, data=data)
summary(fit)
ggplot(data, aes(x=Number.of.meals.with.fish, y=Total.Mercury.in.mg.g)) +
geom_point() + labs(title = "Scatterplot of fish meals and mercury levels") +
geom_smooth(method=lm)
fit <- lm(Total.Mercury.in.mg.g ~ Number.of.meals.with.fish, data=data)
summary(fit)$coefficients[2,1]
#estimate of beta 0
summary(fit)$coefficients[1,1]
model <- lm(Total.Mercury.in.mg.g ~ Number.of.meals.with.fish, data = data)
anova(model)
summary(model)
t.test(model$coefficients[2], 0, alternative = "two.sided", conf.level = 0.95)
fitted(model)
resid(model)
t.test(model$coefficients[2], 0, alternative = "two.sided", conf.level = 0.95)
install.packages("plotly")
library(plotly)
head(iris)
p<-plot_ly(iris, x=Sepal.Length, type = "box", name = "SL")
p<-plot_ly(iris, x = ~Sepal.Length, type = "box", name = "SL")
p
p<-add_trace(p, x = ~Sepal.width, name = "SN")
p
p<-add_trace(p, x = ~Sepal.Width, name = "SN")
p
plot_ly(iris, y = ~Sepal.Length, type = "box", name = "SepalLength") %>%
add_trace(y = ~Sepal.Width, name = "SepalWidth") %>%
add_trace(y = ~Petal.Length, name = "PetalLength") %>%
add_trace(y = ~Petal.Width, name = "PetalWidth") %>%
layout(yaxis = list(title = "Measure")) -> p
p
p<-plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
p
p<-plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length) %>%
add_markers(p, color = ~Petal.Length, size = ~Petal.Width) %>%
add_markers(symbol = ~Species)
p
iris %>%
plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length) %>%
add_markers(p, color = ~Petal.Length, size = ~Petal.Width) %>%
add_markers(symbol = ~Species)
head(txhousing)
tx <- group_by(txhousing, city)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
head(txhousing)
tx <- group_by(txhousing, city)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotly")
install.packages("plotly")
library(plotly)
head(iris)
p<-plot_ly(iris, x = ~Sepal.Length, type = "box", name = "SL")
p
p<-add_trace(p, x = ~Sepal.Width, name = "SN")
p
plot_ly(iris, y = ~Sepal.Length, type = "box", name = "SepalLength") %>%
add_trace(y = ~Sepal.Width, name = "SepalWidth") %>%
add_trace(y = ~Petal.Length, name = "PetalLength") %>%
add_trace(y = ~Petal.Width, name = "PetalWidth") %>%
layout(yaxis = list(title = "Measure")) -> p
p
iris %>%
plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length) %>%
add_markers(p, color = ~Petal.Length, size = ~Petal.Width) %>%
add_markers(symbol = ~Species)
getwd()
setwd(~/Users/kadam/Desktop/CS544)
setwd("~/Users/kadam/Desktop/CS544")
setwd("~Users/kadam/Desktop/CS544")
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 2.5)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.01)
data<-read.csv("/Users/kadam/Downloads/CEO.csv")
View(data)
table(data$High.School)
pie(table(data$High.School))
bar(table(data$High.School))
barplot(table(data$High.School))
barplot(table(data$High.School),main="CEO Education Levels", xlab =
"Education level", ylab = "Frequency")
y<-read.csv("/Users/kadam/Downloads/age_of_employees.csv")
mean(y)
mean(y$Age)
min(y$Age)
max(y$Age)
sd(y$Age)
median(y$Age)
quantile(y$Age)
var(y$Age)
summary(y$Age)
hist(y$Age)
pnorm(266,mean=252,sd=7)
pnorm(238,mean=252,sd=7)
pnorm(280,mean=259,sd=8)
qnorm(280,mean=259,sd=8)
data3<- data.frame(age, LYVE1, REG1B, TFF1)
#Multiple linear regression
data3<- data2[,c("age","LYVE1","REG1B","TFF1")]
setwd("/Users/kadam/Desktop/CS555/Project")
install.packages(gridExtra)
#-------Data Preparation--------------------------
#uploading the dataset in R
data<-read.csv("/Users/kadam/Desktop/CS555/Project/urinary_biomarkers.csv")
# to view the structure of dataset and the datatypes
str(data)
#check null values are found in the data set
colSums(is.na(data))
#removing the columns that are not necessary in investigation of research questions
data2<-data[,!names(data) %in% c("sample_id", "stage", "benign_sample_diagnosis")]
#repalce the NA values in 2 columns with the column mean
data2$plasma_CA19_9[is.na(data2$plasma_CA19_9)]<-mean(data2$plasma_CA19_9, na.rm = TRUE)
data2$REG1A[is.na(data2$REG1A)]<-mean(data2$REG1A, na.rm = TRUE)
#checking for null values again in the proceesed dataset
colSums(is.na(data2))
#saving the cleaned data file that can be used for analysis
write.csv(data2, "/Users/kadam/Desktop/CS555/Project/urinary_biomarkers_cleaned.csv")
View(data2)
# distribution of 4 feature variables.
par(mfrow=c(2,2))
boxplot(data2$creatinine,
main = "creatinine", col = "steelblue")
boxplot(data2$LYVE1,
main = "LYVE1", col = "#E69F00")
boxplot(data2$REG1B,
main = "REG1B", col = "darkolivegreen3")
boxplot(data2$TFF1,
main = "TFF1", col = "coral")
par(mfrow=c(1,1))
#histogram of the 4 feature variables
par(mfrow=c(2,2))
hist(data2$creatinine,
col="salmon")
hist(data2$LYVE1,
col="darkseagreen1")
hist(data2$REG1B,
col="cornflowerblue")
hist(data2$TFF1,
col="darkgoldenrod1")
par(mfrow=c(1,1))
#Multiple linear regression
data3<- data2[,c("age","LYVE1","REG1B","TFF1")]
cor(data3)
pairs(data3)
#buikding MLR model
m<-lm(age~LYVE1+REG1B+TFF1)
#buikding MLR model
m<-lm(data3$age~LYVE1+REG1B+TFF1)
#buikding MLR model
m<-lm(data3$age~data3$LYVE1+data3$REG1B+data3$TFF1)
m
summary(m)
anova(m)
confint(m, level=0.95)
# Critical value of F test
qf(0.99, df1=2, df2=97)
# Critical value of t test
qt(0.995, df=97)
# Critical value of F test
qf(0.99, df1=3, df2=586)
# Critical value of t test
qt(0.995, df=586)
# model residuals
resid(m)
# same as resid()
residuals(m)
par(mfrow=c(2,2))
plot(fitted(m), resid(m), axes=TRUE, frame.plot=TRUE, xlab='fitted values', ylab='residue')
abline(a=0, b=0)
plot(data3$LYVE1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='age', ylab='residue')
plot(data3$REG1B, resid(m), axes=TRUE, frame.plot=TRUE, xlab='height', ylab='residue')
plot(data3$TFF1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='height', ylab='residue')
hist(resid(m))
par(mfrow=c(1,1))
par(mfrow=c(3,2))
plot(fitted(m), resid(m), axes=TRUE, frame.plot=TRUE, xlab='fitted values', ylab='residue')
abline(a=0, b=0)
plot(data3$LYVE1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='LYVE1', ylab='residue')
plot(data3$REG1B, resid(m), axes=TRUE, frame.plot=TRUE, xlab='REG1B', ylab='residue')
plot(data3$TFF1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='TFF1', ylab='residue')
hist(resid(m))
par(mfrow=c(1,1))
#manual calculation of r-squared
totalss <- sum((data3$age - mean(data3$age))^2)
regss <- sum((fitted(m) - mean(data3$age))^2)
resiss <- sum((data3$age-fitted(m))^2)
fstatistic <- (regss/2)/(resiss/97)
pvalue <- 1-pf(fstatistic, df1=2, df2=97)
R2 <- regss/totalss
R2
pvalue
#Multiple linear regression
data3<- data2[,c("age","LYVE1","REG1B","TFF1")]
cor(data3)
pairs(data3)
#building MLR model
m<-lm(data3$age~data3$LYVE1+data3$REG1B+data3$TFF1)
m
#checking the model assumptions
# model residuals
resid(m)
# same as resid()
residuals(m)
#plotting the residuals
par(mfrow=c(3,2))
plot(fitted(m), resid(m), axes=TRUE, frame.plot=TRUE, xlab='fitted values', ylab='residue')
abline(a=0, b=0)
plot(data3$LYVE1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='LYVE1', ylab='residue')
plot(data3$REG1B, resid(m), axes=TRUE, frame.plot=TRUE, xlab='REG1B', ylab='residue')
plot(data3$TFF1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='TFF1', ylab='residue')
hist(resid(m))
par(mfrow=c(1,1))
#plotting the residuals
par(mfrow=c(3,2))
plot(fitted(m), resid(m), axes=TRUE, frame.plot=TRUE, xlab='fitted values', ylab='residue')
abline(a=0, b=0)
plot(data3$LYVE1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='LYVE1', ylab='residue')
plot(data3$REG1B, resid(m), axes=TRUE, frame.plot=TRUE, xlab='REG1B', ylab='residue')
plot(data3$TFF1, resid(m), axes=TRUE, frame.plot=TRUE, xlab='TFF1', ylab='residue')
hist(resid(m))
par(mfrow=c(1,1))
#interpreting the results
summary(m)
#manual calculation of r-squared
totalss <- sum((data3$age - mean(data3$age))^2)
regss <- sum((fitted(m) - mean(data3$age))^2)
resiss <- sum((data3$age-fitted(m))^2)
fstatistic <- (regss/2)/(resiss/97)
pvalue <- 1-pf(fstatistic, df1=2, df2=97)
R2 <- regss/totalss
R2
pvalue
# Critical value of F test, alpha=0.05
qf(0.95, df1=3, df2=586)
# Critical value of t test, alpha=0.05
qt(0.975, df=586)
#interpreting the results
summary(m)
#confidece interval
confit(m,level=0.95)
#manual calculation of r-squared
#confidece interval
confint(m,level=0.95)
#------------------ANCOVA------------------------------------
library(ggplot2)
ggplot(data = data2, aes(x = diagnosis)) +
geom_histogram()
ggplot(data2, aes(x = diagnosis, y = age)) +
geom_boxplot()
ggplot(data2, aes(x = diagnosis, y = age, fill = diagnosis)) +
geom_boxplot()
ggplot(data2, aes(group = diagnosis, y = age, fill = diagnosis)) +
geom_boxplot()
ggplot(data2, aes(x=diagnosis, fill=diagnosis, color=diagnosis)) +
geom_histogram(position="identity")
ggplot(data2, aes(x=diagnosis, fill=diagnosis, color=diagnosis)) +
geom_histogram(binwidth = 30, position="identity")
ggplot(data2, aes(x=diagnosis, fill=diagnosis, color=diagnosis)) +
geom_histogram(binwidth = 5, position="identity")
ggplot(data2, aes(x=diagnosis, fill=diagnosis, color=diagnosis)) +
geom_histogram(binwidth = 3, position="identity")
hist(data2$diagnosis)
ggplot(data = data2, aes(x = age)) +
geom_histogram()
data2 <- data2 |>
mutate(diagnosis = factor(diagnosis))
ggplot(data = data2, aes(x = age, fill = diagnosis)) +
geom_histogram()
ggplot(data = data2, aes(x = age, group= diagnosis,fill = diagnosis)) +
geom_histogram()
ggplot(data2, aes(group = diagnosis, y = age, fill = diagnosis)) +
geom_boxplot()
qf(.95, df1=2, df2=587)
is.factor(data2$diagnosis)
m1<-aov(data2$age~data2$diagnosis, data=data2)
resiss <- sum((data3$age-fitted(m))^2)
fstatistic <- (regss/2)/(resiss/97)
pvalue <- 1-pf(fstatistic, df1=2, df2=97)
R2 <- regss/totalss
summary(m1)
#pairwise comparison
pairwise.t.test(data2$age, data2$diagnosis, p.adj='none')
pairwise.t.test(data2$age, data2$diagnosis, p.adj='bonferroni')
is.factor(data$grpmum)
data$fnum = factor(data$grpnum)
data$fnum
m2<- aov(data2$age~data$fnum, data=data)
TukeyHSD(m2)
plot(TukeyHSD(m2), cex.axis=.7)
m2<- aov(data2$age~data2$diagnosis, data=data2)
TukeyHSD(m2)
plot(TukeyHSD(m2), cex.axis=.7)
is.factor(data2$grpmum)
#pairwise comparison
pairwise.t.test(data2$age, data2$diagnosis, p.adj='none')
pairwise.t.test(data2$age, data2$diagnosis, p.adj='bonferroni')
is.factor(data2$grpmum)
data2$fnum = factor(data2$grpnum)
data2$fnum
m2<- aov(data2$age~data2$fnum, data=data2)
TukeyHSD(m2)
plot(TukeyHSD(m1), cex.axis=.7)
is.factor(data2$diagnosis)
# distribution of 4 feature variables.
par(mfrow=c(2,2))
boxplot(data2$creatinine,
main = "creatinine", col = "steelblue")
boxplot(data2$LYVE1,
main = "LYVE1", col = "#E69F00")
boxplot(data2$REG1B,
main = "REG1B", col = "darkolivegreen3")
boxplot(data2$TFF1,
main = "TFF1", col = "coral")
par(mfrow=c(1,1))
#histogram of the 4 feature variables
par(mfrow=c(2,2))
hist(data2$creatinine,
col="salmon")
hist(data2$LYVE1,
col="darkseagreen1")
hist(data2$REG1B,
col="cornflowerblue")
hist(data2$TFF1,
col="darkgoldenrod1")
par(mfrow=c(1,1))
library(ggplot2)
ggplot(data = data2, aes(x = age, group= sex,fill = sex)) +
geom_histogram()
ggplot(data2, aes(x=sex, y=age)) +
geom_bar()
ggplot(data2, aes(x=sex)) +
geom_bar()
c <- table(data2$sex)
pie(c,
col = hcl.colors(length(c), "BluYl"))
c <- table(data2$sex)
cols <-  hcl.colors(length(levels(c)), "Fall")
PieChart(data2, data = c, hole = 0,
fill = cols,
labels_cex = 0.6)
pie(data2, data = c, hole = 0,
fill = cols,
labels_cex = 0.6)
library(lessR)
pie(c,
col = hcl.colors(length(levels(c)), "BluYl"))
pie(c,
col = hcl.colors(length(c), "BluYl"))
pie(c,
main = "Composition of male and female patients in this study",
col = hcl.colors(length(c), "BluYl"))
pie(c,
labels = paste0(names(c), ": ", c),
main = "Composition of male and female patients in this study",
col = hcl.colors(length(c), "BluYl"))
